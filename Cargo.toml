[package]
categories = []
edition = "2021"
keywords = []
license = "MIT OR Apache-2.0"
name = "theremin"
readme = "README.md"
version = "0.1.0"

[dependencies]
defmt = "0.3.10"
defmt-rtt = "0.4.1"
panic-probe = { version = "0.3.2", features = ["print-defmt"] }
cortex-m-rt = "0.7.5"
cortex-m = "0.7.7"
embassy-executor = { version = "0.6.1", features = [
    "arch-cortex-m",
    "executor-thread",
    "defmt",
    "integrated-timers",
] }
embassy-sync = { version = "0.6.1" }
embassy-rp = { version = "0.2.0", features = [
    "defmt",
    "time-driver",
    "critical-section-impl",
] }
embassy-futures = { version = "0.1.1" }
embassy-time = { version = "0.3.2", features = [
    "defmt",
    "defmt-timestamp-uptime",
] }
derive_more = { version = "1.0.0", default-features = false, features = [
    "debug",
    "display",
    "error",
    "from",
] }
heapless = "0.8.0"
pio-proc = "0.2.2"
pio = "0.2.1"
fixed = "1.28.0"
libm = "0.2.11"

[build-dependencies]
pio-proc = "0.2.2"
pio = "0.2.1"


[profile.dev]
debug = true
debug-assertions = true
lto = false
opt-level = 0
panic = "unwind"
rpath = false

[profile.release]
codegen-units = 1
debug = false
debug-assertions = false
lto = "fat"
opt-level = 3
panic = "unwind"
rpath = false


[profile.test]
debug = true
debug-assertions = true
lto = false
opt-level = 0
rpath = false

# cmk
# [lints.rust]
# # To use the `unsafe` keyword, do not remove the `unsafe_code = "forbid"` entry.
# # Instead, prefer to change it to `unsafe_code = "deny"` + opt-in with local use of
# # `#[expect(unsafe_code)]`'s on an as needed basis.
# bare_trait_objects = "forbid"
# rust_2018_idioms = { level = "warn", priority = -2 }
# # TODO: Remove when this is stabilized and/or works better. It's giving many false positives at time of writing (2024-08).
# unfulfilled_lint_expectations = "warn"
# unknown_lints = "warn"
# unsafe_code = "deny"
# unused_variables = "warn"
# # TODO: Determine why `#[expect(unexpected_cfgs)]` at the site of the problem
# #       (`target_pointer_width = 128`) is ineffective; the setting below is overly broad
# unexpected_cfgs = "warn"

# # Uncomment before ship to reconcile use of possibly redundant crates, debug remnants, missing
# # license files and more
# #missing_docs = "warn"
# #warnings = "deny"

# [lints.clippy]
# # Safety-critical application lints
# arithmetic_side_effects = "deny"
# float_cmp_const = "deny"
# indexing_slicing = "deny"
# pedantic = { level = "deny", priority = -2 }
# semicolon_if_nothing_returned = "warn"
# semicolon_inside_block = "warn"
# str_to_string = "warn"
# unwrap_used = "deny"
# wildcard_imports = "deny"

# all = { level = "warn", priority = -2 }
# nursery = { level = "warn", priority = -2 }
# # End of safety-critical application lints

# allow_attributes = "warn"
# allow_attributes_without_reason = "deny"
# # TODO: cargo_common_metadata = { level = "warn", priority = -1 }
# # TODO: doc_markdown = "warn"
# enum_glob_use = "forbid"
# enum_variant_names = "warn"
# equatable_if_let = "warn"
# error_impl_error = "allow"
# implicit_return = "allow"
# integer_division_remainder_used = "warn"
# items-after-statements = "warn"
# iter_nth_zero = "warn"
# match_bool = "warn"
# match-same-arms = "warn"
# min_ident_chars = "warn"
# missing_docs_in_private_items = { level = "allow", priority = -1 }
# missing_errors_doc = "warn"
# missing_trait_methods = "warn"
# module_name_repetitions = "warn"
# multiple_crate_versions = "allow"
# obfuscated_if_else = "warn"
# pub_use = "allow"
# pub_with_shorthand = "warn"
# question_mark_used = "allow"
# self_named_module_files = "warn"
# semicolon_outside_block = "warn"
# separated_literal_suffix = "warn"
# shadow_reuse = "warn"
# shadow_unrelated = "warn"
# similar_names = "warn"
# single_call_fn = "allow"
# std_instead_of_alloc = "warn"
# std_instead_of_core = "warn"
# too_long_first_doc_paragraph = "warn"
# unnecessary_wraps = "warn"
# unreachable = "warn"

# # TODO: Uncomment before ship to reconcile use of possibly redundant crates, debug remnants, missing
# # license files and more
# # blanket_clippy_restriction_lints = "warn"
# #cargo = "warn"
# # restriction = "warn"
