.program distance

; X is the last value sent. Initialize it to
; u32::MAX which means 'echo timeout'
; (Set X to u32::MAX by subtracting 1 from 0)
    set x, 0
subtraction_trick:
    jmp x-- subtraction_trick

; DEBUG: See the value of x
    mov isr, x
    push

; Read the max echo wait into OSR
    pull                         ; same as pull block

; DEBUG: Send constant value
    set y, 7           ; Push '7' so that we know we've reached this point
    mov isr, y
    push

; Main loop
.wrap_target
    ; Generate 10Î¼s trigger pulse (4 cycles at 343_000Hz)
    set pins, 0b1 [3]       ; Set trigger pin to high, add delay of 3
    set pins, 0b0           ; Set trigger pin to low voltage

    ; When the trigger goes high, start counting down until it goes low
    wait 1 pin 0            ; Wait for echo pin to be high voltage
    mov y, osr              ; Load max echo wait into Y

measure_echo_loop:
    jmp pin echo_active     ; if echo voltage is high continue count down
    jmp measurement_complete ; if echo voltage is low, measurement is complete
echo_active:
    jmp y-- measure_echo_loop ; Continue counting down unless timeout

; Y tells where the echo countdown stopped. It
; will be u32::MAX if the echo timed out.
measurement_complete:
    jmp x!=y send_result    ; if measurement is different, then sent it.
    jmp cooldown            ; If measurement is the same, don't send.

send_result:
    mov isr, y              ; Store measurement in ISR
    push                    ; Output ISR
    mov x, y               ; Save the measurement in X

; Cool down period before next measurement
cooldown:
    wait 0 pin 0           ; Wait for echo pin to be low
.wrap                      ; Restart the measurement loop
